// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mimir.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mimir_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mimir_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mimir_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mimir_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mimir_2eproto;
namespace cortexpb {
class Exemplar;
struct ExemplarDefaultTypeInternal;
extern ExemplarDefaultTypeInternal _Exemplar_default_instance_;
class LabelPair;
struct LabelPairDefaultTypeInternal;
extern LabelPairDefaultTypeInternal _LabelPair_default_instance_;
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricMetadata;
struct MetricMetadataDefaultTypeInternal;
extern MetricMetadataDefaultTypeInternal _MetricMetadata_default_instance_;
class Sample;
struct SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class TimeSeries;
struct TimeSeriesDefaultTypeInternal;
extern TimeSeriesDefaultTypeInternal _TimeSeries_default_instance_;
class WriteRequest;
struct WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
class WriteResponse;
struct WriteResponseDefaultTypeInternal;
extern WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
}  // namespace cortexpb
PROTOBUF_NAMESPACE_OPEN
template<> ::cortexpb::Exemplar* Arena::CreateMaybeMessage<::cortexpb::Exemplar>(Arena*);
template<> ::cortexpb::LabelPair* Arena::CreateMaybeMessage<::cortexpb::LabelPair>(Arena*);
template<> ::cortexpb::Metric* Arena::CreateMaybeMessage<::cortexpb::Metric>(Arena*);
template<> ::cortexpb::MetricMetadata* Arena::CreateMaybeMessage<::cortexpb::MetricMetadata>(Arena*);
template<> ::cortexpb::Sample* Arena::CreateMaybeMessage<::cortexpb::Sample>(Arena*);
template<> ::cortexpb::TimeSeries* Arena::CreateMaybeMessage<::cortexpb::TimeSeries>(Arena*);
template<> ::cortexpb::WriteRequest* Arena::CreateMaybeMessage<::cortexpb::WriteRequest>(Arena*);
template<> ::cortexpb::WriteResponse* Arena::CreateMaybeMessage<::cortexpb::WriteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cortexpb {

enum WriteRequest_SourceEnum : int {
  WriteRequest_SourceEnum_API = 0,
  WriteRequest_SourceEnum_RULE = 1,
  WriteRequest_SourceEnum_WriteRequest_SourceEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WriteRequest_SourceEnum_WriteRequest_SourceEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WriteRequest_SourceEnum_IsValid(int value);
constexpr WriteRequest_SourceEnum WriteRequest_SourceEnum_SourceEnum_MIN = WriteRequest_SourceEnum_API;
constexpr WriteRequest_SourceEnum WriteRequest_SourceEnum_SourceEnum_MAX = WriteRequest_SourceEnum_RULE;
constexpr int WriteRequest_SourceEnum_SourceEnum_ARRAYSIZE = WriteRequest_SourceEnum_SourceEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteRequest_SourceEnum_descriptor();
template<typename T>
inline const std::string& WriteRequest_SourceEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteRequest_SourceEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteRequest_SourceEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriteRequest_SourceEnum_descriptor(), enum_t_value);
}
inline bool WriteRequest_SourceEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriteRequest_SourceEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteRequest_SourceEnum>(
    WriteRequest_SourceEnum_descriptor(), name, value);
}
enum MetricMetadata_MetricType : int {
  MetricMetadata_MetricType_UNKNOWN = 0,
  MetricMetadata_MetricType_COUNTER = 1,
  MetricMetadata_MetricType_GAUGE = 2,
  MetricMetadata_MetricType_HISTOGRAM = 3,
  MetricMetadata_MetricType_GAUGEHISTOGRAM = 4,
  MetricMetadata_MetricType_SUMMARY = 5,
  MetricMetadata_MetricType_INFO = 6,
  MetricMetadata_MetricType_STATESET = 7,
  MetricMetadata_MetricType_MetricMetadata_MetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MetricMetadata_MetricType_MetricMetadata_MetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MetricMetadata_MetricType_IsValid(int value);
constexpr MetricMetadata_MetricType MetricMetadata_MetricType_MetricType_MIN = MetricMetadata_MetricType_UNKNOWN;
constexpr MetricMetadata_MetricType MetricMetadata_MetricType_MetricType_MAX = MetricMetadata_MetricType_STATESET;
constexpr int MetricMetadata_MetricType_MetricType_ARRAYSIZE = MetricMetadata_MetricType_MetricType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricMetadata_MetricType_descriptor();
template<typename T>
inline const std::string& MetricMetadata_MetricType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricMetadata_MetricType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricMetadata_MetricType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetricMetadata_MetricType_descriptor(), enum_t_value);
}
inline bool MetricMetadata_MetricType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MetricMetadata_MetricType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetricMetadata_MetricType>(
    MetricMetadata_MetricType_descriptor(), name, value);
}
// ===================================================================

class WriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cortexpb.WriteRequest) */ {
 public:
  inline WriteRequest() : WriteRequest(nullptr) {}
  ~WriteRequest() override;
  explicit constexpr WriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteRequest(const WriteRequest& from);
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cortexpb.WriteRequest";
  }
  protected:
  explicit WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WriteRequest_SourceEnum SourceEnum;
  static constexpr SourceEnum API =
    WriteRequest_SourceEnum_API;
  static constexpr SourceEnum RULE =
    WriteRequest_SourceEnum_RULE;
  static inline bool SourceEnum_IsValid(int value) {
    return WriteRequest_SourceEnum_IsValid(value);
  }
  static constexpr SourceEnum SourceEnum_MIN =
    WriteRequest_SourceEnum_SourceEnum_MIN;
  static constexpr SourceEnum SourceEnum_MAX =
    WriteRequest_SourceEnum_SourceEnum_MAX;
  static constexpr int SourceEnum_ARRAYSIZE =
    WriteRequest_SourceEnum_SourceEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SourceEnum_descriptor() {
    return WriteRequest_SourceEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& SourceEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SourceEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SourceEnum_Name.");
    return WriteRequest_SourceEnum_Name(enum_t_value);
  }
  static inline bool SourceEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SourceEnum* value) {
    return WriteRequest_SourceEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimeseriesFieldNumber = 1,
    kMetadataFieldNumber = 3,
    kSourceFieldNumber = 2,
    kSkipLabelNameValidationFieldNumber = 1000,
  };
  // repeated .cortexpb.TimeSeries timeseries = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "PreallocTimeseries"];
  int timeseries_size() const;
  private:
  int _internal_timeseries_size() const;
  public:
  void clear_timeseries();
  ::cortexpb::TimeSeries* mutable_timeseries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::TimeSeries >*
      mutable_timeseries();
  private:
  const ::cortexpb::TimeSeries& _internal_timeseries(int index) const;
  ::cortexpb::TimeSeries* _internal_add_timeseries();
  public:
  const ::cortexpb::TimeSeries& timeseries(int index) const;
  ::cortexpb::TimeSeries* add_timeseries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::TimeSeries >&
      timeseries() const;

  // repeated .cortexpb.MetricMetadata metadata = 3 [(.gogoproto.nullable) = true];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::cortexpb::MetricMetadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::MetricMetadata >*
      mutable_metadata();
  private:
  const ::cortexpb::MetricMetadata& _internal_metadata(int index) const;
  ::cortexpb::MetricMetadata* _internal_add_metadata();
  public:
  const ::cortexpb::MetricMetadata& metadata(int index) const;
  ::cortexpb::MetricMetadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::MetricMetadata >&
      metadata() const;

  // .cortexpb.WriteRequest.SourceEnum Source = 2;
  void clear_source();
  ::cortexpb::WriteRequest_SourceEnum source() const;
  void set_source(::cortexpb::WriteRequest_SourceEnum value);
  private:
  ::cortexpb::WriteRequest_SourceEnum _internal_source() const;
  void _internal_set_source(::cortexpb::WriteRequest_SourceEnum value);
  public:

  // bool skip_label_name_validation = 1000;
  void clear_skip_label_name_validation();
  bool skip_label_name_validation() const;
  void set_skip_label_name_validation(bool value);
  private:
  bool _internal_skip_label_name_validation() const;
  void _internal_set_skip_label_name_validation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cortexpb.WriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::TimeSeries > timeseries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::MetricMetadata > metadata_;
  int source_;
  bool skip_label_name_validation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mimir_2eproto;
};
// -------------------------------------------------------------------

class WriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cortexpb.WriteResponse) */ {
 public:
  inline WriteResponse() : WriteResponse(nullptr) {}
  explicit constexpr WriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteResponse(const WriteResponse& from);
  WriteResponse(WriteResponse&& from) noexcept
    : WriteResponse() {
    *this = ::std::move(from);
  }

  inline WriteResponse& operator=(const WriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteResponse& operator=(WriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteResponse* internal_default_instance() {
    return reinterpret_cast<const WriteResponse*>(
               &_WriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WriteResponse& a, WriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WriteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WriteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cortexpb.WriteResponse";
  }
  protected:
  explicit WriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cortexpb.WriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mimir_2eproto;
};
// -------------------------------------------------------------------

class TimeSeries final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cortexpb.TimeSeries) */ {
 public:
  inline TimeSeries() : TimeSeries(nullptr) {}
  ~TimeSeries() override;
  explicit constexpr TimeSeries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeries(const TimeSeries& from);
  TimeSeries(TimeSeries&& from) noexcept
    : TimeSeries() {
    *this = ::std::move(from);
  }

  inline TimeSeries& operator=(const TimeSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeries& operator=(TimeSeries&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSeries& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSeries* internal_default_instance() {
    return reinterpret_cast<const TimeSeries*>(
               &_TimeSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeSeries& a, TimeSeries& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeries* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeSeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeSeries>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeSeries& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TimeSeries& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeries* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cortexpb.TimeSeries";
  }
  protected:
  explicit TimeSeries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kSamplesFieldNumber = 2,
    kExemplarsFieldNumber = 3,
  };
  // repeated .cortexpb.LabelPair labels = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "LabelAdapter"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::cortexpb::LabelPair* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >*
      mutable_labels();
  private:
  const ::cortexpb::LabelPair& _internal_labels(int index) const;
  ::cortexpb::LabelPair* _internal_add_labels();
  public:
  const ::cortexpb::LabelPair& labels(int index) const;
  ::cortexpb::LabelPair* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >&
      labels() const;

  // repeated .cortexpb.Sample samples = 2 [(.gogoproto.nullable) = false];
  int samples_size() const;
  private:
  int _internal_samples_size() const;
  public:
  void clear_samples();
  ::cortexpb::Sample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::Sample >*
      mutable_samples();
  private:
  const ::cortexpb::Sample& _internal_samples(int index) const;
  ::cortexpb::Sample* _internal_add_samples();
  public:
  const ::cortexpb::Sample& samples(int index) const;
  ::cortexpb::Sample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::Sample >&
      samples() const;

  // repeated .cortexpb.Exemplar exemplars = 3 [(.gogoproto.nullable) = false];
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;
  public:
  void clear_exemplars();
  ::cortexpb::Exemplar* mutable_exemplars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::Exemplar >*
      mutable_exemplars();
  private:
  const ::cortexpb::Exemplar& _internal_exemplars(int index) const;
  ::cortexpb::Exemplar* _internal_add_exemplars();
  public:
  const ::cortexpb::Exemplar& exemplars(int index) const;
  ::cortexpb::Exemplar* add_exemplars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::Exemplar >&
      exemplars() const;

  // @@protoc_insertion_point(class_scope:cortexpb.TimeSeries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::Sample > samples_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::Exemplar > exemplars_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mimir_2eproto;
};
// -------------------------------------------------------------------

class LabelPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cortexpb.LabelPair) */ {
 public:
  inline LabelPair() : LabelPair(nullptr) {}
  ~LabelPair() override;
  explicit constexpr LabelPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LabelPair(const LabelPair& from);
  LabelPair(LabelPair&& from) noexcept
    : LabelPair() {
    *this = ::std::move(from);
  }

  inline LabelPair& operator=(const LabelPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelPair& operator=(LabelPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelPair* internal_default_instance() {
    return reinterpret_cast<const LabelPair*>(
               &_LabelPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LabelPair& a, LabelPair& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LabelPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LabelPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LabelPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cortexpb.LabelPair";
  }
  protected:
  explicit LabelPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:cortexpb.LabelPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mimir_2eproto;
};
// -------------------------------------------------------------------

class Sample final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cortexpb.Sample) */ {
 public:
  inline Sample() : Sample(nullptr) {}
  ~Sample() override;
  explicit constexpr Sample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sample(const Sample& from);
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sample& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(Sample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sample& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sample& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cortexpb.Sample";
  }
  protected:
  explicit Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kTimestampMsFieldNumber = 2,
  };
  // double value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // int64 timestamp_ms = 2;
  void clear_timestamp_ms();
  int64_t timestamp_ms() const;
  void set_timestamp_ms(int64_t value);
  private:
  int64_t _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cortexpb.Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double value_;
  int64_t timestamp_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mimir_2eproto;
};
// -------------------------------------------------------------------

class MetricMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cortexpb.MetricMetadata) */ {
 public:
  inline MetricMetadata() : MetricMetadata(nullptr) {}
  ~MetricMetadata() override;
  explicit constexpr MetricMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricMetadata(const MetricMetadata& from);
  MetricMetadata(MetricMetadata&& from) noexcept
    : MetricMetadata() {
    *this = ::std::move(from);
  }

  inline MetricMetadata& operator=(const MetricMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricMetadata& operator=(MetricMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricMetadata* internal_default_instance() {
    return reinterpret_cast<const MetricMetadata*>(
               &_MetricMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MetricMetadata& a, MetricMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MetricMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cortexpb.MetricMetadata";
  }
  protected:
  explicit MetricMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MetricMetadata_MetricType MetricType;
  static constexpr MetricType UNKNOWN =
    MetricMetadata_MetricType_UNKNOWN;
  static constexpr MetricType COUNTER =
    MetricMetadata_MetricType_COUNTER;
  static constexpr MetricType GAUGE =
    MetricMetadata_MetricType_GAUGE;
  static constexpr MetricType HISTOGRAM =
    MetricMetadata_MetricType_HISTOGRAM;
  static constexpr MetricType GAUGEHISTOGRAM =
    MetricMetadata_MetricType_GAUGEHISTOGRAM;
  static constexpr MetricType SUMMARY =
    MetricMetadata_MetricType_SUMMARY;
  static constexpr MetricType INFO =
    MetricMetadata_MetricType_INFO;
  static constexpr MetricType STATESET =
    MetricMetadata_MetricType_STATESET;
  static inline bool MetricType_IsValid(int value) {
    return MetricMetadata_MetricType_IsValid(value);
  }
  static constexpr MetricType MetricType_MIN =
    MetricMetadata_MetricType_MetricType_MIN;
  static constexpr MetricType MetricType_MAX =
    MetricMetadata_MetricType_MetricType_MAX;
  static constexpr int MetricType_ARRAYSIZE =
    MetricMetadata_MetricType_MetricType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MetricType_descriptor() {
    return MetricMetadata_MetricType_descriptor();
  }
  template<typename T>
  static inline const std::string& MetricType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MetricType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MetricType_Name.");
    return MetricMetadata_MetricType_Name(enum_t_value);
  }
  static inline bool MetricType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MetricType* value) {
    return MetricMetadata_MetricType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFamilyNameFieldNumber = 2,
    kHelpFieldNumber = 4,
    kUnitFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // string metric_family_name = 2;
  void clear_metric_family_name();
  const std::string& metric_family_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric_family_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric_family_name();
  PROTOBUF_NODISCARD std::string* release_metric_family_name();
  void set_allocated_metric_family_name(std::string* metric_family_name);
  private:
  const std::string& _internal_metric_family_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric_family_name(const std::string& value);
  std::string* _internal_mutable_metric_family_name();
  public:

  // string help = 4;
  void clear_help();
  const std::string& help() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_help(ArgT0&& arg0, ArgT... args);
  std::string* mutable_help();
  PROTOBUF_NODISCARD std::string* release_help();
  void set_allocated_help(std::string* help);
  private:
  const std::string& _internal_help() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_help(const std::string& value);
  std::string* _internal_mutable_help();
  public:

  // string unit = 5;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // .cortexpb.MetricMetadata.MetricType type = 1;
  void clear_type();
  ::cortexpb::MetricMetadata_MetricType type() const;
  void set_type(::cortexpb::MetricMetadata_MetricType value);
  private:
  ::cortexpb::MetricMetadata_MetricType _internal_type() const;
  void _internal_set_type(::cortexpb::MetricMetadata_MetricType value);
  public:

  // @@protoc_insertion_point(class_scope:cortexpb.MetricMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_family_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr help_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mimir_2eproto;
};
// -------------------------------------------------------------------

class Metric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cortexpb.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() override;
  explicit constexpr Metric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metric& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cortexpb.Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
  };
  // repeated .cortexpb.LabelPair labels = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "LabelAdapter"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::cortexpb::LabelPair* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >*
      mutable_labels();
  private:
  const ::cortexpb::LabelPair& _internal_labels(int index) const;
  ::cortexpb::LabelPair* _internal_add_labels();
  public:
  const ::cortexpb::LabelPair& labels(int index) const;
  ::cortexpb::LabelPair* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >&
      labels() const;

  // @@protoc_insertion_point(class_scope:cortexpb.Metric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair > labels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mimir_2eproto;
};
// -------------------------------------------------------------------

class Exemplar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cortexpb.Exemplar) */ {
 public:
  inline Exemplar() : Exemplar(nullptr) {}
  ~Exemplar() override;
  explicit constexpr Exemplar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Exemplar(const Exemplar& from);
  Exemplar(Exemplar&& from) noexcept
    : Exemplar() {
    *this = ::std::move(from);
  }

  inline Exemplar& operator=(const Exemplar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Exemplar& operator=(Exemplar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Exemplar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Exemplar* internal_default_instance() {
    return reinterpret_cast<const Exemplar*>(
               &_Exemplar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Exemplar& a, Exemplar& b) {
    a.Swap(&b);
  }
  inline void Swap(Exemplar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Exemplar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Exemplar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Exemplar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Exemplar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Exemplar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Exemplar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cortexpb.Exemplar";
  }
  protected:
  explicit Exemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kValueFieldNumber = 2,
    kTimestampMsFieldNumber = 3,
  };
  // repeated .cortexpb.LabelPair labels = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "LabelAdapter"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::cortexpb::LabelPair* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >*
      mutable_labels();
  private:
  const ::cortexpb::LabelPair& _internal_labels(int index) const;
  ::cortexpb::LabelPair* _internal_add_labels();
  public:
  const ::cortexpb::LabelPair& labels(int index) const;
  ::cortexpb::LabelPair* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >&
      labels() const;

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // int64 timestamp_ms = 3;
  void clear_timestamp_ms();
  int64_t timestamp_ms() const;
  void set_timestamp_ms(int64_t value);
  private:
  int64_t _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cortexpb.Exemplar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair > labels_;
  double value_;
  int64_t timestamp_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mimir_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WriteRequest

// repeated .cortexpb.TimeSeries timeseries = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "PreallocTimeseries"];
inline int WriteRequest::_internal_timeseries_size() const {
  return timeseries_.size();
}
inline int WriteRequest::timeseries_size() const {
  return _internal_timeseries_size();
}
inline void WriteRequest::clear_timeseries() {
  timeseries_.Clear();
}
inline ::cortexpb::TimeSeries* WriteRequest::mutable_timeseries(int index) {
  // @@protoc_insertion_point(field_mutable:cortexpb.WriteRequest.timeseries)
  return timeseries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::TimeSeries >*
WriteRequest::mutable_timeseries() {
  // @@protoc_insertion_point(field_mutable_list:cortexpb.WriteRequest.timeseries)
  return &timeseries_;
}
inline const ::cortexpb::TimeSeries& WriteRequest::_internal_timeseries(int index) const {
  return timeseries_.Get(index);
}
inline const ::cortexpb::TimeSeries& WriteRequest::timeseries(int index) const {
  // @@protoc_insertion_point(field_get:cortexpb.WriteRequest.timeseries)
  return _internal_timeseries(index);
}
inline ::cortexpb::TimeSeries* WriteRequest::_internal_add_timeseries() {
  return timeseries_.Add();
}
inline ::cortexpb::TimeSeries* WriteRequest::add_timeseries() {
  ::cortexpb::TimeSeries* _add = _internal_add_timeseries();
  // @@protoc_insertion_point(field_add:cortexpb.WriteRequest.timeseries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::TimeSeries >&
WriteRequest::timeseries() const {
  // @@protoc_insertion_point(field_list:cortexpb.WriteRequest.timeseries)
  return timeseries_;
}

// .cortexpb.WriteRequest.SourceEnum Source = 2;
inline void WriteRequest::clear_source() {
  source_ = 0;
}
inline ::cortexpb::WriteRequest_SourceEnum WriteRequest::_internal_source() const {
  return static_cast< ::cortexpb::WriteRequest_SourceEnum >(source_);
}
inline ::cortexpb::WriteRequest_SourceEnum WriteRequest::source() const {
  // @@protoc_insertion_point(field_get:cortexpb.WriteRequest.Source)
  return _internal_source();
}
inline void WriteRequest::_internal_set_source(::cortexpb::WriteRequest_SourceEnum value) {
  
  source_ = value;
}
inline void WriteRequest::set_source(::cortexpb::WriteRequest_SourceEnum value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:cortexpb.WriteRequest.Source)
}

// repeated .cortexpb.MetricMetadata metadata = 3 [(.gogoproto.nullable) = true];
inline int WriteRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int WriteRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void WriteRequest::clear_metadata() {
  metadata_.Clear();
}
inline ::cortexpb::MetricMetadata* WriteRequest::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:cortexpb.WriteRequest.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::MetricMetadata >*
WriteRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:cortexpb.WriteRequest.metadata)
  return &metadata_;
}
inline const ::cortexpb::MetricMetadata& WriteRequest::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::cortexpb::MetricMetadata& WriteRequest::metadata(int index) const {
  // @@protoc_insertion_point(field_get:cortexpb.WriteRequest.metadata)
  return _internal_metadata(index);
}
inline ::cortexpb::MetricMetadata* WriteRequest::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::cortexpb::MetricMetadata* WriteRequest::add_metadata() {
  ::cortexpb::MetricMetadata* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:cortexpb.WriteRequest.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::MetricMetadata >&
WriteRequest::metadata() const {
  // @@protoc_insertion_point(field_list:cortexpb.WriteRequest.metadata)
  return metadata_;
}

// bool skip_label_name_validation = 1000;
inline void WriteRequest::clear_skip_label_name_validation() {
  skip_label_name_validation_ = false;
}
inline bool WriteRequest::_internal_skip_label_name_validation() const {
  return skip_label_name_validation_;
}
inline bool WriteRequest::skip_label_name_validation() const {
  // @@protoc_insertion_point(field_get:cortexpb.WriteRequest.skip_label_name_validation)
  return _internal_skip_label_name_validation();
}
inline void WriteRequest::_internal_set_skip_label_name_validation(bool value) {
  
  skip_label_name_validation_ = value;
}
inline void WriteRequest::set_skip_label_name_validation(bool value) {
  _internal_set_skip_label_name_validation(value);
  // @@protoc_insertion_point(field_set:cortexpb.WriteRequest.skip_label_name_validation)
}

// -------------------------------------------------------------------

// WriteResponse

// -------------------------------------------------------------------

// TimeSeries

// repeated .cortexpb.LabelPair labels = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "LabelAdapter"];
inline int TimeSeries::_internal_labels_size() const {
  return labels_.size();
}
inline int TimeSeries::labels_size() const {
  return _internal_labels_size();
}
inline void TimeSeries::clear_labels() {
  labels_.Clear();
}
inline ::cortexpb::LabelPair* TimeSeries::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:cortexpb.TimeSeries.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >*
TimeSeries::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:cortexpb.TimeSeries.labels)
  return &labels_;
}
inline const ::cortexpb::LabelPair& TimeSeries::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::cortexpb::LabelPair& TimeSeries::labels(int index) const {
  // @@protoc_insertion_point(field_get:cortexpb.TimeSeries.labels)
  return _internal_labels(index);
}
inline ::cortexpb::LabelPair* TimeSeries::_internal_add_labels() {
  return labels_.Add();
}
inline ::cortexpb::LabelPair* TimeSeries::add_labels() {
  ::cortexpb::LabelPair* _add = _internal_add_labels();
  // @@protoc_insertion_point(field_add:cortexpb.TimeSeries.labels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >&
TimeSeries::labels() const {
  // @@protoc_insertion_point(field_list:cortexpb.TimeSeries.labels)
  return labels_;
}

// repeated .cortexpb.Sample samples = 2 [(.gogoproto.nullable) = false];
inline int TimeSeries::_internal_samples_size() const {
  return samples_.size();
}
inline int TimeSeries::samples_size() const {
  return _internal_samples_size();
}
inline void TimeSeries::clear_samples() {
  samples_.Clear();
}
inline ::cortexpb::Sample* TimeSeries::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:cortexpb.TimeSeries.samples)
  return samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::Sample >*
TimeSeries::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:cortexpb.TimeSeries.samples)
  return &samples_;
}
inline const ::cortexpb::Sample& TimeSeries::_internal_samples(int index) const {
  return samples_.Get(index);
}
inline const ::cortexpb::Sample& TimeSeries::samples(int index) const {
  // @@protoc_insertion_point(field_get:cortexpb.TimeSeries.samples)
  return _internal_samples(index);
}
inline ::cortexpb::Sample* TimeSeries::_internal_add_samples() {
  return samples_.Add();
}
inline ::cortexpb::Sample* TimeSeries::add_samples() {
  ::cortexpb::Sample* _add = _internal_add_samples();
  // @@protoc_insertion_point(field_add:cortexpb.TimeSeries.samples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::Sample >&
TimeSeries::samples() const {
  // @@protoc_insertion_point(field_list:cortexpb.TimeSeries.samples)
  return samples_;
}

// repeated .cortexpb.Exemplar exemplars = 3 [(.gogoproto.nullable) = false];
inline int TimeSeries::_internal_exemplars_size() const {
  return exemplars_.size();
}
inline int TimeSeries::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void TimeSeries::clear_exemplars() {
  exemplars_.Clear();
}
inline ::cortexpb::Exemplar* TimeSeries::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:cortexpb.TimeSeries.exemplars)
  return exemplars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::Exemplar >*
TimeSeries::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:cortexpb.TimeSeries.exemplars)
  return &exemplars_;
}
inline const ::cortexpb::Exemplar& TimeSeries::_internal_exemplars(int index) const {
  return exemplars_.Get(index);
}
inline const ::cortexpb::Exemplar& TimeSeries::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:cortexpb.TimeSeries.exemplars)
  return _internal_exemplars(index);
}
inline ::cortexpb::Exemplar* TimeSeries::_internal_add_exemplars() {
  return exemplars_.Add();
}
inline ::cortexpb::Exemplar* TimeSeries::add_exemplars() {
  ::cortexpb::Exemplar* _add = _internal_add_exemplars();
  // @@protoc_insertion_point(field_add:cortexpb.TimeSeries.exemplars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::Exemplar >&
TimeSeries::exemplars() const {
  // @@protoc_insertion_point(field_list:cortexpb.TimeSeries.exemplars)
  return exemplars_;
}

// -------------------------------------------------------------------

// LabelPair

// bytes name = 1;
inline void LabelPair::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LabelPair::name() const {
  // @@protoc_insertion_point(field_get:cortexpb.LabelPair.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LabelPair::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cortexpb.LabelPair.name)
}
inline std::string* LabelPair::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cortexpb.LabelPair.name)
  return _s;
}
inline const std::string& LabelPair::_internal_name() const {
  return name_.Get();
}
inline void LabelPair::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LabelPair::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LabelPair::release_name() {
  // @@protoc_insertion_point(field_release:cortexpb.LabelPair.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LabelPair::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cortexpb.LabelPair.name)
}

// bytes value = 2;
inline void LabelPair::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& LabelPair::value() const {
  // @@protoc_insertion_point(field_get:cortexpb.LabelPair.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LabelPair::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cortexpb.LabelPair.value)
}
inline std::string* LabelPair::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cortexpb.LabelPair.value)
  return _s;
}
inline const std::string& LabelPair::_internal_value() const {
  return value_.Get();
}
inline void LabelPair::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LabelPair::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LabelPair::release_value() {
  // @@protoc_insertion_point(field_release:cortexpb.LabelPair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LabelPair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cortexpb.LabelPair.value)
}

// -------------------------------------------------------------------

// Sample

// int64 timestamp_ms = 2;
inline void Sample::clear_timestamp_ms() {
  timestamp_ms_ = int64_t{0};
}
inline int64_t Sample::_internal_timestamp_ms() const {
  return timestamp_ms_;
}
inline int64_t Sample::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:cortexpb.Sample.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void Sample::_internal_set_timestamp_ms(int64_t value) {
  
  timestamp_ms_ = value;
}
inline void Sample::set_timestamp_ms(int64_t value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:cortexpb.Sample.timestamp_ms)
}

// double value = 1;
inline void Sample::clear_value() {
  value_ = 0;
}
inline double Sample::_internal_value() const {
  return value_;
}
inline double Sample::value() const {
  // @@protoc_insertion_point(field_get:cortexpb.Sample.value)
  return _internal_value();
}
inline void Sample::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Sample::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cortexpb.Sample.value)
}

// -------------------------------------------------------------------

// MetricMetadata

// .cortexpb.MetricMetadata.MetricType type = 1;
inline void MetricMetadata::clear_type() {
  type_ = 0;
}
inline ::cortexpb::MetricMetadata_MetricType MetricMetadata::_internal_type() const {
  return static_cast< ::cortexpb::MetricMetadata_MetricType >(type_);
}
inline ::cortexpb::MetricMetadata_MetricType MetricMetadata::type() const {
  // @@protoc_insertion_point(field_get:cortexpb.MetricMetadata.type)
  return _internal_type();
}
inline void MetricMetadata::_internal_set_type(::cortexpb::MetricMetadata_MetricType value) {
  
  type_ = value;
}
inline void MetricMetadata::set_type(::cortexpb::MetricMetadata_MetricType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cortexpb.MetricMetadata.type)
}

// string metric_family_name = 2;
inline void MetricMetadata::clear_metric_family_name() {
  metric_family_name_.ClearToEmpty();
}
inline const std::string& MetricMetadata::metric_family_name() const {
  // @@protoc_insertion_point(field_get:cortexpb.MetricMetadata.metric_family_name)
  return _internal_metric_family_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricMetadata::set_metric_family_name(ArgT0&& arg0, ArgT... args) {
 
 metric_family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cortexpb.MetricMetadata.metric_family_name)
}
inline std::string* MetricMetadata::mutable_metric_family_name() {
  std::string* _s = _internal_mutable_metric_family_name();
  // @@protoc_insertion_point(field_mutable:cortexpb.MetricMetadata.metric_family_name)
  return _s;
}
inline const std::string& MetricMetadata::_internal_metric_family_name() const {
  return metric_family_name_.Get();
}
inline void MetricMetadata::_internal_set_metric_family_name(const std::string& value) {
  
  metric_family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetricMetadata::_internal_mutable_metric_family_name() {
  
  return metric_family_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetricMetadata::release_metric_family_name() {
  // @@protoc_insertion_point(field_release:cortexpb.MetricMetadata.metric_family_name)
  return metric_family_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetricMetadata::set_allocated_metric_family_name(std::string* metric_family_name) {
  if (metric_family_name != nullptr) {
    
  } else {
    
  }
  metric_family_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric_family_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metric_family_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metric_family_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cortexpb.MetricMetadata.metric_family_name)
}

// string help = 4;
inline void MetricMetadata::clear_help() {
  help_.ClearToEmpty();
}
inline const std::string& MetricMetadata::help() const {
  // @@protoc_insertion_point(field_get:cortexpb.MetricMetadata.help)
  return _internal_help();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricMetadata::set_help(ArgT0&& arg0, ArgT... args) {
 
 help_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cortexpb.MetricMetadata.help)
}
inline std::string* MetricMetadata::mutable_help() {
  std::string* _s = _internal_mutable_help();
  // @@protoc_insertion_point(field_mutable:cortexpb.MetricMetadata.help)
  return _s;
}
inline const std::string& MetricMetadata::_internal_help() const {
  return help_.Get();
}
inline void MetricMetadata::_internal_set_help(const std::string& value) {
  
  help_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetricMetadata::_internal_mutable_help() {
  
  return help_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetricMetadata::release_help() {
  // @@protoc_insertion_point(field_release:cortexpb.MetricMetadata.help)
  return help_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetricMetadata::set_allocated_help(std::string* help) {
  if (help != nullptr) {
    
  } else {
    
  }
  help_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), help,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (help_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    help_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cortexpb.MetricMetadata.help)
}

// string unit = 5;
inline void MetricMetadata::clear_unit() {
  unit_.ClearToEmpty();
}
inline const std::string& MetricMetadata::unit() const {
  // @@protoc_insertion_point(field_get:cortexpb.MetricMetadata.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricMetadata::set_unit(ArgT0&& arg0, ArgT... args) {
 
 unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cortexpb.MetricMetadata.unit)
}
inline std::string* MetricMetadata::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:cortexpb.MetricMetadata.unit)
  return _s;
}
inline const std::string& MetricMetadata::_internal_unit() const {
  return unit_.Get();
}
inline void MetricMetadata::_internal_set_unit(const std::string& value) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetricMetadata::_internal_mutable_unit() {
  
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetricMetadata::release_unit() {
  // @@protoc_insertion_point(field_release:cortexpb.MetricMetadata.unit)
  return unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetricMetadata::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cortexpb.MetricMetadata.unit)
}

// -------------------------------------------------------------------

// Metric

// repeated .cortexpb.LabelPair labels = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "LabelAdapter"];
inline int Metric::_internal_labels_size() const {
  return labels_.size();
}
inline int Metric::labels_size() const {
  return _internal_labels_size();
}
inline void Metric::clear_labels() {
  labels_.Clear();
}
inline ::cortexpb::LabelPair* Metric::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:cortexpb.Metric.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >*
Metric::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:cortexpb.Metric.labels)
  return &labels_;
}
inline const ::cortexpb::LabelPair& Metric::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::cortexpb::LabelPair& Metric::labels(int index) const {
  // @@protoc_insertion_point(field_get:cortexpb.Metric.labels)
  return _internal_labels(index);
}
inline ::cortexpb::LabelPair* Metric::_internal_add_labels() {
  return labels_.Add();
}
inline ::cortexpb::LabelPair* Metric::add_labels() {
  ::cortexpb::LabelPair* _add = _internal_add_labels();
  // @@protoc_insertion_point(field_add:cortexpb.Metric.labels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >&
Metric::labels() const {
  // @@protoc_insertion_point(field_list:cortexpb.Metric.labels)
  return labels_;
}

// -------------------------------------------------------------------

// Exemplar

// repeated .cortexpb.LabelPair labels = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "LabelAdapter"];
inline int Exemplar::_internal_labels_size() const {
  return labels_.size();
}
inline int Exemplar::labels_size() const {
  return _internal_labels_size();
}
inline void Exemplar::clear_labels() {
  labels_.Clear();
}
inline ::cortexpb::LabelPair* Exemplar::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:cortexpb.Exemplar.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >*
Exemplar::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:cortexpb.Exemplar.labels)
  return &labels_;
}
inline const ::cortexpb::LabelPair& Exemplar::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::cortexpb::LabelPair& Exemplar::labels(int index) const {
  // @@protoc_insertion_point(field_get:cortexpb.Exemplar.labels)
  return _internal_labels(index);
}
inline ::cortexpb::LabelPair* Exemplar::_internal_add_labels() {
  return labels_.Add();
}
inline ::cortexpb::LabelPair* Exemplar::add_labels() {
  ::cortexpb::LabelPair* _add = _internal_add_labels();
  // @@protoc_insertion_point(field_add:cortexpb.Exemplar.labels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cortexpb::LabelPair >&
Exemplar::labels() const {
  // @@protoc_insertion_point(field_list:cortexpb.Exemplar.labels)
  return labels_;
}

// double value = 2;
inline void Exemplar::clear_value() {
  value_ = 0;
}
inline double Exemplar::_internal_value() const {
  return value_;
}
inline double Exemplar::value() const {
  // @@protoc_insertion_point(field_get:cortexpb.Exemplar.value)
  return _internal_value();
}
inline void Exemplar::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Exemplar::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cortexpb.Exemplar.value)
}

// int64 timestamp_ms = 3;
inline void Exemplar::clear_timestamp_ms() {
  timestamp_ms_ = int64_t{0};
}
inline int64_t Exemplar::_internal_timestamp_ms() const {
  return timestamp_ms_;
}
inline int64_t Exemplar::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:cortexpb.Exemplar.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void Exemplar::_internal_set_timestamp_ms(int64_t value) {
  
  timestamp_ms_ = value;
}
inline void Exemplar::set_timestamp_ms(int64_t value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:cortexpb.Exemplar.timestamp_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cortexpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cortexpb::WriteRequest_SourceEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cortexpb::WriteRequest_SourceEnum>() {
  return ::cortexpb::WriteRequest_SourceEnum_descriptor();
}
template <> struct is_proto_enum< ::cortexpb::MetricMetadata_MetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cortexpb::MetricMetadata_MetricType>() {
  return ::cortexpb::MetricMetadata_MetricType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mimir_2eproto
